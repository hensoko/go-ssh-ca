// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	// Bastion
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingRequest, error)
	BastionCheckRegistration(ctx context.Context, in *BastionCheckRegistrationRequest, opts ...grpc.CallOption) (*BastionRegisterRequest, error)
	BastionRegister(ctx context.Context, in *BastionRegisterRequest, opts ...grpc.CallOption) (*BastionRegisterResponse, error)
	// Client
	SignUserPublicKey(ctx context.Context, in *SignUserPublicKeyRequest, opts ...grpc.CallOption) (*SignUserPublicKeyResponse, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingRequest, error) {
	out := new(PingRequest)
	err := c.cc.Invoke(ctx, "/api.Server/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) BastionCheckRegistration(ctx context.Context, in *BastionCheckRegistrationRequest, opts ...grpc.CallOption) (*BastionRegisterRequest, error) {
	out := new(BastionRegisterRequest)
	err := c.cc.Invoke(ctx, "/api.Server/BastionCheckRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) BastionRegister(ctx context.Context, in *BastionRegisterRequest, opts ...grpc.CallOption) (*BastionRegisterResponse, error) {
	out := new(BastionRegisterResponse)
	err := c.cc.Invoke(ctx, "/api.Server/BastionRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SignUserPublicKey(ctx context.Context, in *SignUserPublicKeyRequest, opts ...grpc.CallOption) (*SignUserPublicKeyResponse, error) {
	out := new(SignUserPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/api.Server/SignUserPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	// Bastion
	Ping(context.Context, *PingRequest) (*PingRequest, error)
	BastionCheckRegistration(context.Context, *BastionCheckRegistrationRequest) (*BastionRegisterRequest, error)
	BastionRegister(context.Context, *BastionRegisterRequest) (*BastionRegisterResponse, error)
	// Client
	SignUserPublicKey(context.Context, *SignUserPublicKeyRequest) (*SignUserPublicKeyResponse, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) Ping(context.Context, *PingRequest) (*PingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedServerServer) BastionCheckRegistration(context.Context, *BastionCheckRegistrationRequest) (*BastionRegisterRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BastionCheckRegistration not implemented")
}
func (UnimplementedServerServer) BastionRegister(context.Context, *BastionRegisterRequest) (*BastionRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BastionRegister not implemented")
}
func (UnimplementedServerServer) SignUserPublicKey(context.Context, *SignUserPublicKeyRequest) (*SignUserPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUserPublicKey not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_BastionCheckRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BastionCheckRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).BastionCheckRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/BastionCheckRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).BastionCheckRegistration(ctx, req.(*BastionCheckRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_BastionRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BastionRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).BastionRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/BastionRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).BastionRegister(ctx, req.(*BastionRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SignUserPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUserPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SignUserPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/SignUserPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SignUserPublicKey(ctx, req.(*SignUserPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Server_Ping_Handler,
		},
		{
			MethodName: "BastionCheckRegistration",
			Handler:    _Server_BastionCheckRegistration_Handler,
		},
		{
			MethodName: "BastionRegister",
			Handler:    _Server_BastionRegister_Handler,
		},
		{
			MethodName: "SignUserPublicKey",
			Handler:    _Server_SignUserPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/server/api.proto",
}
