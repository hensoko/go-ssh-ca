// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BastionClient is the client API for Bastion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BastionClient interface {
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	SignPublicKey(ctx context.Context, in *SignPublicKeyRequest, opts ...grpc.CallOption) (*SignPublicKeyResponse, error)
}

type bastionClient struct {
	cc grpc.ClientConnInterface
}

func NewBastionClient(cc grpc.ClientConnInterface) BastionClient {
	return &bastionClient{cc}
}

func (c *bastionClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/api.Bastion/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bastionClient) SignPublicKey(ctx context.Context, in *SignPublicKeyRequest, opts ...grpc.CallOption) (*SignPublicKeyResponse, error) {
	out := new(SignPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/api.Bastion/SignPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BastionServer is the server API for Bastion service.
// All implementations must embed UnimplementedBastionServer
// for forward compatibility
type BastionServer interface {
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	SignPublicKey(context.Context, *SignPublicKeyRequest) (*SignPublicKeyResponse, error)
	mustEmbedUnimplementedBastionServer()
}

// UnimplementedBastionServer must be embedded to have forward compatible implementations.
type UnimplementedBastionServer struct {
}

func (UnimplementedBastionServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedBastionServer) SignPublicKey(context.Context, *SignPublicKeyRequest) (*SignPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignPublicKey not implemented")
}
func (UnimplementedBastionServer) mustEmbedUnimplementedBastionServer() {}

// UnsafeBastionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BastionServer will
// result in compilation errors.
type UnsafeBastionServer interface {
	mustEmbedUnimplementedBastionServer()
}

func RegisterBastionServer(s *grpc.Server, srv BastionServer) {
	s.RegisterService(&_Bastion_serviceDesc, srv)
}

func _Bastion_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BastionServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Bastion/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BastionServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bastion_SignPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BastionServer).SignPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Bastion/SignPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BastionServer).SignPublicKey(ctx, req.(*SignPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bastion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Bastion",
	HandlerType: (*BastionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Bastion_Authenticate_Handler,
		},
		{
			MethodName: "SignPublicKey",
			Handler:    _Bastion_SignPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bastion/api/api.proto",
}
